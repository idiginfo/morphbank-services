package net.morphbank.loadexcel;

import jxl.Cell;
import jxl.Sheet;

/**
 * Set of methods to try to check the excel workbook before using its data
 * @author gjimenez
 *
 */
public class ValidateXls {
	
	SheetReader sheetReader;
	private boolean isXlsValid = true;

	public ValidateXls(SheetReader sheetReader) {
		this.sheetReader = sheetReader;
	}
	
	public boolean checkEverything() {
		isXlsValid &= isSpecimenVSLocalityOk();
		isXlsValid &= isImageVSSpecimenOk();
		isXlsValid &= isImageVSViewOk();
		return isXlsValid;
	}
	
	public boolean isSpecimenVSLocalityOk() {
		Sheet specimenSheet = sheetReader.getSheet("Specimen");
		Sheet localitySheet = sheetReader.getSheet("Locality");
		//build a list of localities in Locality
		int colLocalityName = sheetReader.getColumnNumberByName("Locality", "Locality Name [Auto generated--Do not change!]");
		Cell[] localityNamesLocality = localitySheet.getColumn(colLocalityName);
		//build a list of localities in Specimen
		int colSpecimenLocality = sheetReader.getColumnNumberByName("Specimen", "Locality");
		Cell[] localityNamesSpecimen = specimenSheet.getColumn(colSpecimenLocality);
			
		return this.testColumns(localityNamesSpecimen, localityNamesLocality, "Specimen", "Locality");
	}
	
	public boolean isImageVSSpecimenOk() {
		Sheet specimenSheet = sheetReader.getSheet("Specimen");
		Sheet imageSheet = sheetReader.getSheet("Image");
		//build a list of specimens in Specimen
		int colSpecimenName = sheetReader.getColumnNumberByName("Specimen", "Specimen Description [Autogenerated -- do not change!]");
		Cell[] specimenNamesSpecimen = specimenSheet.getColumn(colSpecimenName);
		//build a list of specimen in Images
		int colImageSpecimen = sheetReader.getColumnNumberByName("Image", "Specimen Description");
		Cell[] specimenNamesImage = imageSheet.getColumn(colImageSpecimen);
			
		return this.testColumns(specimenNamesImage, specimenNamesSpecimen, "Image", "Specimen");
	}
	
	public boolean isImageVSViewOk() {
		Sheet viewSheet = sheetReader.getSheet("View");
		Sheet imageSheet = sheetReader.getSheet("Image");
		//build a list of views in MyView
		int colViewName = sheetReader.getColumnNumberByName("View", "My View Name");
		Cell[] viewNamesView = viewSheet.getColumn(colViewName);
		//build a list of views in Images
		int colImageView = sheetReader.getColumnNumberByName("Image", "My View Name");
		Cell[] viewNamesImage = imageSheet.getColumn(colImageView);
			
		return this.testColumns(viewNamesImage, viewNamesView, "Image", "View");
	}
	
	
	/**
	 * Checks if the selected item from a drop down list 
	 * actually belongs to the list. An error in the spreadsheet may happen
	 * if the user modified the drop down list entries without updating the 
	 * item selected.
	 * @param col1 column from the drop down list
	 * @param col2 column with values generating the drop down list
	 * @param col1Sheet name of the spreadsheet (used for error message)
	 * @param col2Sheet name of the spreadsheet (used for error message)
	 * @return false is there is at least one error (no match found), true otherwise
	 */
	private boolean testColumns(Cell[] col1, Cell[] col2, String col1Sheet, String col2Sheet){
		boolean noErrorInColumn = true;
		for (int i=1; i < col1.length; i++) {
			boolean test = false;
			for (int j=1; j < col2.length; j++) {
				test |= col1[i].getContents().equalsIgnoreCase(col2[j].getContents());
				if(col1[i].getContents().length() < 1 || test) {
					test = true;
					break;
				}
			}
			if (!test) {
				System.err.println("The " + col1Sheet + "'s " + col2Sheet.toLowerCase() +" row " + (i+1) +
						" does not match any " + col2Sheet.toLowerCase() +
						" in the " + col2Sheet + " spreadsheet.");
				noErrorInColumn &= false;
			}
		}
		return noErrorInColumn;
	}
}
